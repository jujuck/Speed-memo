[
  {
    "name": "all numbers in TypeScript are either floating point values or BigIntegers",
    "num": "1",
    "value": "1",
    "image": ""
  },
  {
    "name": ": number",
    "num": "2",
    "value": "1",
    "image": ""
  },
  {
    "name": "TypeScript also uses double quotes (\") or single quotes (') to surround textual data",
    "num": "3",
    "value": "2",
    "image": ""
  },
  {
    "name": ": string",
    "num": "4",
    "value": "2",
    "image": ""
  },
  {
    "name": "Array types can be written in one of two ways",
    "num": "5",
    "value": "3",
    "image": ""
  },
  {
    "name": ": number[] or Array<number>",
    "num": "6",
    "value": "3",
    "image": ""
  },
  {
    "name": "an enum is a way of giving more friendly names to sets of numeric values.",
    "num": "7",
    "value": "4",
    "image": ""
  },
  {
    "name": "enum Color { Red, Green, Blue }",
    "num": "8",
    "value": "4",
    "image": ""
  },
  {
    "name": "Type aliases create a new name for a type. ",
    "num": "9",
    "value": "5",
    "image": ""
  },

  {
    "name": "type Animal = { name: string }",
    "num": "10",
    "value": "5",
    "image": ""
  },
  {
    "name": "Interfaces vs. Type Aliases",
    "num": "11",
    "value": "6",
    "image": ""
  },
  {
    "name": "Almost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.",
    "num": "12",
    "value": "6",
    "image": ""
  },
  {
    "name": "Conditional Types",
    "num": "13",
    "value": "7",
    "image": ""
  },
  {
    "name": "The Pipe : 'string' | 'number'",
    "num": "14",
    "value": "7",
    "image": ""
  },
  {
    "name": "Optional Properties (properties?: number)",
    "num": "15",
    "value": "8",
    "image": ""
  },
  {
    "name": "you can use optional chaining to simplify working with nullable types.",
    "num": "16",
    "value": "8",
    "image": ""
  },
  {
    "name": "An intersection type creates a new type by combining multiple existing types.",
    "num": "17",
    "value": "9",
    "image": ""
  },
  {
    "name": "type typeAB = typeA & typeB;",
    "num": "18",
    "value": "9",
    "image": ""
  },
  {
    "name": "TypeScriptâ€™s Omit utility type creates a new type by excluding specific properties0",
    "num": "19",
    "value": "10",
    "image": ""
  },
  {
    "name": "type NewType = Omit<OriginalType, 'Key1' | 'Key2'>",
    "num": "20",
    "value": "10",
    "image": ""
  },
  {
    "name": "Submit event type from Html form",
    "num": "21",
    "value": "11",
    "image": ""
  },
  {
    "name": "const _onSubmit = (e: SyntheticEvent<HTMLFormElement, SubmitEvent>) => {}",
    "num": "22",
    "value": "11",
    "image": ""
  },
  {
    "name": "TypeScript is a free and open-source high-level programming language ",
    "num": "23",
    "value": "12",
    "image": ""
  },
  {
    "name": "developed by Microsoft that adds static typing with optional type annotations to JavaScript.",
    "num": "24",
    "value": "12",
    "image": ""
  }
]
